<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation=" 
           http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/mvc 
           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理，3.04新增功能，需要重新设置spring-mvc-3.0.xsd -->
	<mvc:resources mapping="styles/**" location="/styles/" cache-period="31556926"/>
	<mvc:resources mapping="attach/**" location="/attach/" cache-period="31556926"/>
	 
	<mvc:default-servlet-handler/>  
	 
	<mvc:view-controller path="/" view-name="forward:blog/home"/>

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" >
				<property name="paramName" value="request_locale" />
			</bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/admin/**" />
			<bean class="com.ketayao.interceptor.AuthorizeInterceptor" >
				<property name="userService" ref="userService" />
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<context:component-scan base-package="com.ketayao.controller,com.ketayao.controller.admin" />

	<!-- Configures the @Controller programming model -->
	<mvc:annotation-driven />
	
	<bean id="kindEditorUpload" class="org.springframework.web.servlet.mvc.ServletForwardingController">
    	<property name="servletName" value="kindEditorUpload"/>
  	</bean>
  	<bean id="Captcha" class="org.springframework.web.servlet.mvc.ServletForwardingController">
    	<property name="servletName" value="Captcha"/>
  	</bean>
  	
	<bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <property name="maxUploadSize" value="102400000"/>  
	</bean>

	<!-- Application Message Bundle -->
 	<bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages"/>
    </bean>
    
    <!-- 设置freeMarker的配置文件路径 -->
	<bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	    <property name="location" value="classpath:freemarker.properties"/>
	</bean>

	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="freemarkerSettings" ref="freemarkerConfiguration"/>
		<property name="templateLoaderPath" value="/WEB-INF/content/" /> <!-- 模板加载路径 -->
	</bean>

	<!--配置freemarker视图重点配置 -->
	<bean id="freemarkerResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
		<property name="contentType" value="text/html; charset=utf-8" />
		<property name="cache" value="true" />
		<property name="order" value="1" />
		<property name="suffix" value=".ftl" />
		<property name="exposeSpringMacroHelpers" value="true" />
		<!-- 上下文，这里配置之后，fkt文件中可以使用${Session[xxx]} -->
		<property name="exposeSessionAttributes" value="true"/>
		<!-- javax.servlet.ServletException: Cannot expose session attribute 'user_1' because of an existing model object of the same name -->
		<property name="allowSessionOverride" value="true"/> 
		<!-- 上下文，这里配置之后，fkt文件中可以使用${rc.getContextPath()} 来获取文件上下文，类似jsp的request.getContextPath() -->
		<property name="requestContextAttribute" value="rc"></property>
		<!-- 如果freemarker自定义函数的话：有个属性 attributesMap这个属性，里面支持方一个map，key-value的方式来定义你的自定义函数。 
			类要实现freemarker提供的接口。 -->
	</bean>
	
	   
	 <!-- 全局异常配置 start -->  
     <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
         <property name="exceptionMappings">  
             <props>  
                 <prop key="java.lang.Exception">500</prop>  
                 <prop key="java.lang.Throwable">500</prop>  
             </props>  
         </property>  
         <property name="statusCodes">  
             <props>  
                 <prop key="500">500</prop>  
                 <prop key="404">404</prop>  
             </props>  
         </property>  
         <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->  
         <property name="warnLogCategory" value="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"/>  
         <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->  
         <property name="defaultErrorView" value="500"/>  
         <!-- 默认HTTP状态码 -->  
         <property name="defaultStatusCode" value="500"/>  
     </bean>  
     <!-- 全局异常配置 end -->  
	
	<!-- Resolves view names to protected .jsp resources within the /WEB-INF/views directory -->
	<!-- 
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="order" value="2"/> 
		<property name="prefix" value="/"/> 
		<property name="suffix" value=".jsp" /> 
	</bean>
	 -->
</beans> 